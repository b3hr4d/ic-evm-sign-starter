type CreateAddressResponse = record {
  address: text;
};

type SignTransactionResponse = record {
  sign_tx: vec nat8;
  sign_cycles: nat;
};

type DeployEVMContractResponse = record {
  tx: vec nat8;
};

type Transaction = record {
  data: vec nat8;
  timestamp: nat64;
};

type TransactionChainData = record {
  nonce: nat64;
  transactions: vec Transaction;
};

type UserResponse = record {
  address: text;
  transactions: TransactionChainData;
  cycles_balance: nat;
};

service : ( opt variant {  Development; Staging; Production; } ) -> {
  clear_caller_history : (nat8, nat64) -> (variant { Ok; Err : text });
  get_address_data : (nat64) -> (vec UserResponse) query;
  convert_to_cycles : (nat8) -> (variant { Ok : nat; Err : text });
  create_address : (nat8) -> (variant { Ok : CreateAddressResponse; Err : text });
  get_caller_data : (nat8, nat64) -> (opt UserResponse) query;
  get_address : (nat8) -> (variant { Ok : text; Err : text }) query;
  get_vector_of_principal : (nat8) -> (vec nat8) query;
  sign_evm_tx : (nat8, vec nat8, nat64) -> (
    variant { Ok : SignTransactionResponse; Err : text },
  );
};